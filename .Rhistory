group = "Sample_type",
filter = FALSE,
abund = "% Rel. Abund.",
qcut = 0.05, # Adjusted p value< 0.05
rcut = 0.65) # Can change r cutoff to be more or less selective
mp_obj = mp
input = input_filt_rar
tax_sum = tax_sum_asv
group = "Sample_type"
filter = FALSE
abund = "% Rel. Abund."
qcut = 0.05
rcut = 0.65
# Make results dataframe
mp_obj_results <- mp_obj$sign %>%
mutate(q.value = p.adjust(mp_obj$sign$p.value, method = "fdr"),
Group = "NA",
taxon = rownames(mp_obj$sign),
num_groups = rowSums(mp_obj$sign[,1:(ncol(mp_obj$sign)-3)])) %>%
filter(q.value < qcut) %>%
filter(stat > rcut) %>%
filter(num_groups == 1)
View(mp_obj_results)
rcut = 0.5
# Make results dataframe
mp_obj_results <- mp_obj$sign %>%
mutate(q.value = p.adjust(mp_obj$sign$p.value, method = "fdr"),
Group = "NA",
taxon = rownames(mp_obj$sign),
num_groups = rowSums(mp_obj$sign[,1:(ncol(mp_obj$sign)-3)])) %>%
filter(q.value < qcut) %>%
filter(stat > rcut) %>%
filter(num_groups == 1)
View(mp_obj_results)
View(mp_obj_results)
# Make group variable and assign values
for (i in 1:nrow(mp_obj_results)) {
if (mp_obj_results[,1][i] == 1) {
mp_obj_results$Group[i] <- substring(names(mp_obj$sign)[1], 3)
}
}
for (i in 1:nrow(mp_obj_results)) {
if (mp_obj_results[,2][i] == 1) {
mp_obj_results$Group[i] <- substring(names(mp_obj$sign)[2], 3)
}
}
if (ncol(mp_obj$sign)-3 > 2) {
for (i in 1:nrow(mp_obj_results)) {
if (mp_obj_results[,3][i] == 1) {
mp_obj_results$Group[i] <- substring(names(mp_obj$sign)[3], 3)
}
}
}
if (ncol(mp_obj$sign)-3 > 3) {
for (i in 1:nrow(mp_obj_results)) {
if (mp_obj_results[,4][i] == 1) {
mp_obj_results$Group[i] <- substring(names(mp_obj$sign)[4], 3)
}
}
}
if (ncol(mp_obj$sign)-3 > 4) {
for (i in 1:nrow(mp_obj_results)) {
if (mp_obj_results[,5][i] == 1) {
mp_obj_results$Group[i] <- substring(names(mp_obj$sign)[5], 3)
}
}
}
if (ncol(mp_obj$sign)-3 > 5) {
for (i in 1:nrow(mp_obj_results)) {
if (mp_obj_results[,6][i] == 1) {
mp_obj_results$Group[i] <- substring(names(mp_obj$sign)[6], 3)
}
}
}
if (ncol(mp_obj$sign)-3 > 6) {
for (i in 1:nrow(mp_obj_results)) {
if (mp_obj_results[,7][i] == 1) {
mp_obj_results$Group[i] <- substring(names(mp_obj$sign)[7], 3)
}
}
}
if (ncol(mp_obj$sign)-3 > 7) {
for (i in 1:nrow(mp_obj_results)) {
if (mp_obj_results[,8][i] == 1) {
mp_obj_results$Group[i] <- substring(names(mp_obj$sign)[8], 3)
}
}
}
if (ncol(mp_obj$sign)-3 > 8) {
for (i in 1:nrow(mp_obj_results)) {
if (mp_obj_results[,9][i] == 1) {
mp_obj_results$Group[i] <- substring(names(mp_obj$sign)[9], 3)
}
}
}
if (ncol(mp_obj$sign)-3 > 9) {
for (i in 1:nrow(mp_obj_results)) {
if (mp_obj_results[,10][i] == 1) {
mp_obj_results$Group[i] <- substring(names(mp_obj$sign)[10], 3)
}
}
}
# Check number in each group
table(mp_obj_results$Group)
# Filter
if (filter == TRUE) {
mp_obj_results <- mp_obj_results %>%
filter(Group != filter_vals)
}
# Get dataframe with indicator correlation coefficients, to plot
mp_obj_corrs <- as.data.frame(mp_obj$str) %>%
dplyr::select(1:length(levels(input$map_loaded[[group]]))) %>%
mutate(taxon = rownames(.)) %>%
filter(taxon %in% mp_obj_results$taxon) %>%
set_names(c(levels(input$map_loaded[[group]]), "taxon"))
View(mp_obj_corrs)
View(mp_obj_corrs)
View(mp_obj_corrs)
levels(input$map_loaded[[group]])
# The group must be a factor
input_filt_rar$map_loaded$Sample_type <- as.factor(input_filt_rar$map_loaded$Sample_type)
# Run the function.
plot_multipatt_asv(mp_obj = mp,
input = input_filt_rar,
tax_sum = tax_sum_asv,
group = "Sample_type",
filter = FALSE,
abund = "% Rel. Abund.",
qcut = 0.05, # Adjusted p value< 0.05
rcut = 0.5) # Can change r cutoff to be more or less selective
# Run the function.
plot_multipatt_asv(mp_obj = mp,
input = input_filt_rar,
tax_sum = tax_sum_asv,
group = "Sample_type",
filter = FALSE,
abund = "% Rel. Abund.",
qcut = 0.05, # Adjusted p value< 0.05
rcut = 0.5) # Can change r cutoff to be more or less selective
library(reshape2) # For melting
# Run the function.
plot_multipatt_asv(mp_obj = mp,
input = input_filt_rar,
tax_sum = tax_sum_asv,
group = "Sample_type",
filter = FALSE,
abund = "% Rel. Abund.",
qcut = 0.05, # Adjusted p value< 0.05
rcut = 0.5) # Can change r cutoff to be more or less selective
library(cowplot) # For plotting
# Run the function.
plot_multipatt_asv(mp_obj = mp,
input = input_filt_rar,
tax_sum = tax_sum_asv,
group = "Sample_type",
filter = FALSE,
abund = "% Rel. Abund.",
qcut = 0.05, # Adjusted p value< 0.05
rcut = 0.5) # Can change r cutoff to be more or less selective
# Let's look at the top taxa across samples (Can change the number you want seen)
return_top_taxa(input = input_filt_rar, number_taxa = 10)
# What taxa are common? Give them rarefied input, then level = "what level we want to summarize our information for". Check input_filt_rar$taxonomy_loaded for the levels. level 2 is phylum level
tax_sum_phyla <- summarize_taxonomy(input_filt_rar, level = 2, report_higher_tax = FALSE)
View(tax_sum_phyla)
#how many phyla can we detect in this dataset
tax_sum_phyla[1:5, 1:8]
# Give most abundant phyla across dataset
tax_sum_phyla_Means <- sort(rowMeans(tax_sum_phyla), decreasing = T)
tax_sum_phyla_Means[1:5]
# Now lets try summarizing at the family level (level 5)
tax_sum_families <- summarize_taxonomy(input_filt_rar, level = 5, report_higher_tax = FALSE)
head(tax_sum_families)
# Summarize at family level. Choose different levels with the level argument
tax_sum_families <- summarize_taxonomy(input_filt_rar, level = 5, report_higher_tax = FALSE)
# Default heatmap
plot_ts_heatmap(tax_sum_families,
input_filt_rar$map_loaded,
0.01,
'Sample_type')
# Add some customization
plot_ts_heatmap(tax_sum_families,
input_filt_rar$map_loaded,
0.01,
'Sample_type',
rev_taxa = T) +
coord_flip() +
theme(axis.text.x = element_text(size = 12, angle = 45, vjust = 1))
# Default (choose how many taxa you want with num_taxa)
plot_taxa_bars(tax_sum_families,
input_filt_rar$map_loaded,
"Sample_type",
num_taxa = 10)
# Add some customization
plot_taxa_bars(tax_sum_families,
input_filt_rar$map_loaded,
"Sample_type",
num_taxa = 10) +
labs(x = "Sample Type", y = "Relative Abundance", fill = "Family") +
theme_bw() +
theme(axis.title = element_text(face = "bold", size = 16),
axis.text = element_text(size = 14))
# Add even more customization. plot_taxa_bars has a data_only argument. So you can save the dataset created and then write your own plot!
bars <- plot_taxa_bars(tax_sum_families,
input_filt_rar$map_loaded,
"Sample_type",
num_taxa = 10,
data_only = TRUE)
ggplot(bars, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = "black", size = 0.25) +
labs(x = "Sample Type", y = "Relative Abundance", fill = "Family") +
scale_fill_brewer(palette = "Paired") +
theme_bw() +
theme(axis.title = element_text(face = "bold", size = 16),
axis.text = element_text(size = 14))
ggplot(bars, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", colour = "black", linewidth = 0.25) +
labs(x = "Sample Type", y = "Relative Abundance", fill = "Family") +
scale_fill_brewer(palette = "Paired") +
theme_bw() +
theme(axis.title = element_text(face = "bold", size = 16),
axis.text = element_text(size = 14))
# Different style - classic theme, no black lines between taxa.
ggplot(bars, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", linewidth = 0.25) +
labs(x = "Sample Type", y = "Relative Abundance", fill = "Family") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(axis.title = element_text(face = "bold", size = 16),
axis.text = element_text(size = 14))
# Now try a cliffplot! This is a custom function by Cliff Bueno de Mesquita that serves as a nice but quick overview of the top taxa at different levels. The function is in the GitHub repository and was imported with the source() function in the setup portion of this tutorial.
cliffplot_taxa_bars(input = input_filt_rar, level = 1, variable = "Sample_type")
cliffplot_taxa_bars(input = input_filt_rar, level = 2, variable = "Sample_type")
cliffplot_taxa_bars(input = input_filt_rar, level = 3, variable = "Sample_type")
cliffplot_taxa_bars(input = input_filt_rar, level = 4, variable = "Sample_type")
cliffplot_taxa_bars(input = input_filt_rar, level = 5, variable = "Sample_type")
cliffplot_taxa_bars(input = input_filt_rar, level = 6, variable = "Sample_type")
cliffplot_taxa_bars(input = input_filt_rar, level = 7, variable = "Sample_type")
cliffplot_taxa_bars(input = input_filt_rar, level = 8, variable = "Sample_type")
# Add even more customization. Try a nested facet! These are great for parsing your taxonomy plot by different grouping variables. Set the sampleID as the grouping variable so a bar is made for each sample. Utilize the nested facets to show the differences among the actual grouping variables.
input_filt_rar$map_loaded$sampleID <- rownames(input_filt_rar$map_loaded)
view(input_filt_rar$map_loaded)
bars <- plot_taxa_bars(tax_sum_families,
input_filt_rar$map_loaded,
"sampleID",
num_taxa = 10,
data_only = TRUE)
ggplot(bars, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", linewidth = 0.25) +
labs(x = "Sample Type", y = "Relative Abundance", fill = "Family") +
scale_fill_brewer(palette = "Paired") +
facet_nested(~ Farm_type + Sample_type) +
theme_classic() +
theme(axis.title = element_text(face = "bold", size = 16),
axis.text = element_text(size = 14))
# Summarize taxonomy. Let's do families.
tax_sum_families <- summarize_taxonomy(input_filt_rar, level = 5, report_higher_tax = FALSE)
# Get the plotting data. We'll also join the rest of map_loaded.
bars <- plot_taxa_bars(tax_sum_families,
input_filt_rar$map_loaded,
"sampleID",
num_taxa = 10,
data_only = TRUE) %>%
mutate(taxon = fct_rev(taxon)) %>%
left_join(., input_filt_rar$map_loaded, by = c("group_by" = "sampleID"))
# Run stats and add an asterisk to their name in the legend if significantly affected by treatment
fam_stats <- taxa_summary_by_sample_type(tax_sum_families,
rng_core$map_loaded,
input_filt_rar = 'Site',
filter_level = 0.01,
test_type = 'KW') %>%
filter(rownames(.) %in% bars$taxon) %>%
arrange(desc(rownames(.))) %>%
mutate(Sig = ifelse(pvalsFDR < 0.05, "Pfdr < 0.05", "Pfdr > 0.05")) %>%
mutate(Star = ifelse(pvalsFDR < 0.05, "*", "")) %>%
rownames_to_column(var = "taxon") %>%
arrange(match(taxon, levels(bars$taxon))) %>%
mutate(StarLab = paste(taxon, Star, sep = " "))
# Run stats and add an asterisk to their name in the legend if significantly affected by treatment
fam_stats <- taxa_summary_by_sample_type(tax_sum_families,
rng_core$map_loaded,
input_filt_rar = 'Sample_type',
filter_level = 0.01,
test_type = 'KW') %>%
filter(rownames(.) %in% bars$taxon) %>%
arrange(desc(rownames(.))) %>%
mutate(Sig = ifelse(pvalsFDR < 0.05, "Pfdr < 0.05", "Pfdr > 0.05")) %>%
mutate(Star = ifelse(pvalsFDR < 0.05, "*", "")) %>%
rownames_to_column(var = "taxon") %>%
arrange(match(taxon, levels(bars$taxon))) %>%
mutate(StarLab = paste(taxon, Star, sep = " "))
# Run stats and add an asterisk to their name in the legend if significantly affected by treatment
fam_stats <- taxa_summary_by_sample_type(tax_sum_families,
input_filt_rar$map_loaded,
type_header = 'Sample_type',
filter_level = 0.01,
test_type = 'KW') %>%
filter(rownames(.) %in% bars$taxon) %>%
arrange(desc(rownames(.))) %>%
mutate(Sig = ifelse(pvalsFDR < 0.05, "Pfdr < 0.05", "Pfdr > 0.05")) %>%
mutate(Star = ifelse(pvalsFDR < 0.05, "*", "")) %>%
rownames_to_column(var = "taxon") %>%
arrange(match(taxon, levels(bars$taxon))) %>%
mutate(StarLab = paste(taxon, Star, sep = " "))
View(fam_stats)
View(tax_sum_families)
View(bars)
# Plot
ggplot(bars, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", linewidth = 0.25) +
labs(x = "Sample Type", y = "Relative Abundance", fill = "Family") +
scale_fill_manual(values = c("grey90", brewer.pal(12, "Paired")[12:1]),
labels = c("Other", fam_stats$StarLab)) +
facet_nested(~ Farm_type + Sample_type, space = "free", scales = "free_x") +
theme_classic() +
theme(axis.title = element_text(face = "bold", size = 16),
axis.text = element_text(size = 14))
# Get the plotting data. We'll also join the rest of map_loaded.
bars <- plot_taxa_bars(tax_sum_families,
input_filt_rar$map_loaded,
"sampleID",
num_taxa = 12,
data_only = TRUE) %>%
mutate(taxon = fct_rev(taxon)) %>%
left_join(., input_filt_rar$map_loaded, by = c("group_by" = "sampleID"))
# Run stats and add an asterisk to their name in the legend if significantly affected by treatment
fam_stats <- taxa_summary_by_sample_type(tax_sum_families,
input_filt_rar$map_loaded,
type_header = 'Sample_type',
filter_level = 0.01,
test_type = 'KW') %>%
filter(rownames(.) %in% bars$taxon) %>%
arrange(desc(rownames(.))) %>%
mutate(Sig = ifelse(pvalsFDR < 0.05, "Pfdr < 0.05", "Pfdr > 0.05")) %>%
mutate(Star = ifelse(pvalsFDR < 0.05, "*", "")) %>%
rownames_to_column(var = "taxon") %>%
arrange(match(taxon, levels(bars$taxon))) %>%
mutate(StarLab = paste(taxon, Star, sep = " "))
# Plot
ggplot(bars, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", linewidth = 0.25) +
labs(x = "Sample Type", y = "Relative Abundance", fill = "Family") +
scale_fill_manual(values = c("grey90", brewer.pal(12, "Paired")[12:1]),
labels = c("Other", fam_stats$StarLab)) +
facet_nested(~ Farm_type + Sample_type, space = "free", scales = "free_x") +
theme_classic() +
theme(axis.title = element_text(face = "bold", size = 16),
axis.text = element_text(size = 14))
# Plot
ggplot(bars, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", linewidth = 0.25) +
labs(x = "Sample Type", y = "Relative Abundance", fill = "Family") +
scale_fill_manual(values = c("grey90", brewer.pal(12, "Paired")[12:1]),
labels = c("Other", fam_stats$StarLab)) +
facet_nested(~ Farm_type + Sample_type, space = "free", scales = "free_x") +
theme_classic() +
theme(axis.title.y = element_text(face = "bold", size = 12),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
strip.text = element_text(size = 4),
strip.background = element_rect(linewidth = 0.2),
axis.line.y = element_blank(),
legend.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.box.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.key.size = unit(0.3, "cm"),
panel.spacing.x = unit(c(0.2, 0.2, 0.4, 0.2, 0.2), "lines"))
# Plot
ggplot(bars, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", linewidth = 0.25) +
labs(x = "Sample Type", y = "Relative Abundance", fill = "Family") +
scale_fill_manual(values = c("grey90", brewer.pal(12, "Paired")[12:1]),
labels = c("Other", fam_stats$StarLab)) +
scale_y_continuous(expand = c(0.01, 0.01)) +
facet_nested(~ Farm_type + Sample_type, space = "free", scales = "free_x") +
theme_classic() +
theme(axis.title.y = element_text(face = "bold", size = 12),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_blank(),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
strip.text = element_text(size = 6),
strip.background = element_rect(linewidth = 0.2),
axis.line.y = element_blank(),
legend.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.box.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.key.size = unit(0.3, "cm"),
panel.spacing.x = unit(c(0.2, 0.2, 0.4, 0.2, 0.2), "lines"))
# Plot
ggplot(bars, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", linewidth = 0.25) +
labs(x = "Sample Type", y = "Relative Abundance", fill = "Family") +
scale_fill_manual(values = c("grey90", brewer.pal(12, "Paired")[12:1]),
labels = c("Other", fam_stats$StarLab)) +
scale_y_continuous(expand = c(0.01, 0.01)) +
facet_nested(~ Farm_type + Sample_type, space = "free", scales = "free_x") +
theme_classic() +
theme(axis.title.y = element_text(face = "bold", size = 12),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 8, angle = 90, hjust = 1),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
strip.text = element_text(size = 6),
strip.background = element_rect(linewidth = 0.2),
axis.line.y = element_blank(),
legend.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.box.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.key.size = unit(0.3, "cm"),
panel.spacing.x = unit(c(0.2, 0.2, 0.4, 0.2, 0.2), "lines"))
# Plot
ggplot(bars, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", linewidth = 0.25) +
labs(x = "Sample Type", y = "Relative Abundance", fill = "Family") +
scale_fill_manual(values = c("grey90", brewer.pal(12, "Paired")[12:1]),
labels = c("Other", fam_stats$StarLab)) +
scale_y_continuous(expand = c(0.01, 0.01)) +
facet_nested(~ Farm_type + Sample_type, space = "free", scales = "free_x") +
theme_classic() +
theme(axis.title.y = element_text(face = "bold", size = 12),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 8, angle = 90, hjust = 0.5),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
strip.text = element_text(size = 6),
strip.background = element_rect(linewidth = 0.2),
axis.line.y = element_blank(),
legend.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.box.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.key.size = unit(0.3, "cm"),
panel.spacing.x = unit(c(0.2, 0.2, 0.4, 0.2, 0.2), "lines"))
# Plot
ggplot(bars, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", linewidth = 0.25) +
labs(x = "Sample Type", y = "Relative Abundance", fill = "Family") +
scale_fill_manual(values = c("grey90", brewer.pal(12, "Paired")[12:1]),
labels = c("Other", fam_stats$StarLab)) +
scale_y_continuous(expand = c(0.01, 0.01)) +
facet_nested(~ Farm_type + Sample_type, space = "free", scales = "free_x") +
theme_classic() +
theme(axis.title.y = element_text(face = "bold", size = 12),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 8, angle = 90, hjust = 0),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
strip.text = element_text(size = 6),
strip.background = element_rect(linewidth = 0.2),
axis.line.y = element_blank(),
legend.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.box.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.key.size = unit(0.3, "cm"),
panel.spacing.x = unit(c(0.2, 0.2, 0.4, 0.2, 0.2), "lines"))
# Plot
ggplot(bars, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", linewidth = 0.25) +
labs(x = "Sample Type", y = "Relative Abundance", fill = "Family") +
scale_fill_manual(values = c("grey90", brewer.pal(12, "Paired")[12:1]),
labels = c("Other", fam_stats$StarLab)) +
scale_y_continuous(expand = c(0.01, 0.01)) +
facet_nested(~ Farm_type + Sample_type, space = "free", scales = "free_x") +
theme_classic() +
theme(axis.title.y = element_text(face = "bold", size = 12),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 8, angle = 90, hjust = 1, vjust = 1),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
strip.text = element_text(size = 6),
strip.background = element_rect(linewidth = 0.2),
axis.line.y = element_blank(),
legend.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.box.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.key.size = unit(0.3, "cm"),
panel.spacing.x = unit(c(0.2, 0.2, 0.4, 0.2, 0.2), "lines"))
# Plot
ggplot(bars, aes(group_by, mean_value, fill = taxon)) +
geom_bar(stat = "identity", linewidth = 0.25) +
labs(x = "Sample Type", y = "Relative Abundance", fill = "Family") +
scale_fill_manual(values = c("grey90", brewer.pal(12, "Paired")[12:1]),
labels = c("Other", fam_stats$StarLab)) +
scale_y_continuous(expand = c(0.01, 0.01)) +
facet_nested(~ Farm_type + Sample_type, space = "free", scales = "free_x") +
theme_classic() +
theme(axis.title.y = element_text(face = "bold", size = 12),
axis.title.x = element_blank(),
axis.text.y = element_text(size = 10),
axis.text.x = element_text(size = 8, angle = 90, hjust = 1, vjust = 0.5),
axis.ticks.x = element_blank(),
axis.line.x = element_blank(),
strip.text = element_text(size = 6),
strip.background = element_rect(linewidth = 0.2),
axis.line.y = element_blank(),
legend.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.box.margin = margin(0, 0, 0, 0, unit = "pt"),
legend.key.size = unit(0.3, "cm"),
panel.spacing.x = unit(c(0.2, 0.2, 0.4, 0.2, 0.2), "lines"))
# Test (run a Kruskal-Wallis test on all families with mean rel abund. > filter_level in at least one of the factor levels)
taxa_summary_by_sample_type(tax_sum_families,
input_filt_rar$map_loaded,
type_header = 'Sample_type',
filter_level = 0.05,
test_type = 'KW')
# Or Wilcoxon for 2 levels (farm type)
taxa_summary_by_sample_type(tax_sum_families,
input_filt_rar$map_loaded,
type_header = 'Farm_type',
filter_level = 0.05,
test_type = 'MW')
